import { jest } from '@jest/globals';
import PinCode from './PinCode';

jest.mock('../secure-storage');

// import { getPassword, setPassword, deletePassword } from '../secure-storage';

const testService = '@su.malokhatko/pincode';

describe.skip('PinCode', () => {
  beforeAll(() => jest.useFakeTimers());

  afterAll(() => jest.useRealTimers());

  let pinCode: PinCode;
  beforeEach(() => {
    pinCode = new PinCode(testService);
  })

  describe('authenticate', () => {
    it('should get PIN code from secure storage', async () => {
      // jest.mocked(getPassword).mockResolvedValue(null);
      // const promise = pinCode.authenticate('');
      // jest.runAllTimers();
      // await promise;
      // expect(getPassword).toHaveBeenCalledWith(testService, 'PIN CODE');
    });

    it('should authenticate if PIN code not set', async () => {
      // jest.mocked(getPassword).mockResolvedValue(null);
      // const promise = pinCode.authenticate('');
      // jest.runAllTimers();
      // await expect(promise).resolves.toBe(true);
    });

    it('should authenticate if PIN is correct', async () => {
      // jest.mocked(getPassword).mockResolvedValue('0000');
      // const promise = pinCode.authenticate('0000');
      // jest.runAllTimers();
      // await expect(promise).resolves.toBe(true);
    });

    it('should NOT authenticate if PIN is incorrect', async () => {
      // jest.mocked(getPassword).mockResolvedValue('0000');
      // const promise = pinCode.authenticate('5555');
      // jest.runAllTimers();
      // await expect(promise).resolves.toBe(false);
    });
  });

  describe('checkIsPinSetted', () => {
    it('should get PIN code from secure storage', async () => {
      // jest.mocked(getPassword).mockResolvedValue('0000');
      // await pinCode.checkIsPinSetted();
      // expect(getPassword).toHaveBeenCalledWith(testService, 'PIN CODE');
    });

    it('should return true if PIN is setted', async () => {
      // jest.mocked(getPassword).mockResolvedValue('0000');
      // await expect(pinCode.checkIsPinSetted()).resolves.toBe(true);
    });

    it('should return false if PIN is NOT setted', async () => {
      // jest.mocked(getPassword).mockResolvedValue(null);
      // await expect(pinCode.checkIsPinSetted()).resolves.toBe(false);
    });
  });

//   describe('setPin', () => {
//     it('should set new PIN', async () => {
//       jest.mocked(getPassword).mockResolvedValue('0000');
//       jest.mocked(setPassword).mockResolvedValue();
//       const promise = pinCode.setPin('0000', '5555');
//       jest.runAllTimers();
//       await expect(promise).resolves.toBe(true);
//       expect(setPassword).toHaveBeenCalledWith(testService, 'PIN CODE', '5555');
//     });

//     it('should not set PIN if old pin is incorrect', async () => {
//       jest.mocked(getPassword).mockResolvedValue('0000');
//       jest.mocked(setPassword).mockResolvedValue();
//       const promise = pinCode.setPin('1111', '2222');
//       jest.runAllTimers();
//       await expect(promise).resolves.toBe(false);
//       expect(setPassword).not.toHaveBeenCalled();
//     });
//   });

//   describe('removePin', () => {
//     it('should remove PIN', async () => {
//       jest.mocked(getPassword).mockResolvedValue('0000');
//       jest.mocked(deletePassword).mockResolvedValue(true);
//       const promise = pinCode.removePin('0000');
//       jest.runAllTimers();
//       await expect(promise).resolves.toBe(true);
//       expect(deletePassword).toHaveBeenCalledWith(testService, 'PIN CODE');
//     });

//     it('should not remove PIN if old pin is incorrect', async () => {
//       jest.mocked(getPassword).mockResolvedValue('0000');
//       jest.mocked(deletePassword).mockResolvedValue(true);
//       const promise = pinCode.removePin('1111');
//       jest.runAllTimers();
//       await expect(promise).resolves.toBe(false);
//       expect(deletePassword).not.toHaveBeenCalled();
//     });
//   });
});
